library(readr)
valid_just_correctness <- read_csv("git/dual-timeline/post-data/valid just correctness.csv")
View(valid_just_correctness)
library(readr)
valid_just_sus_scores <- read_csv("git/dual-timeline/post-data/valid just sus scores.csv")
View(valid_just_sus_scores)
library(readr)
valid_just_time <- read_csv("git/dual-timeline/post-data/valid just time.csv")
View(valid_just_time)
save.image("~/git/dual-timeline/post-data/Duet.RData")
View(valid_just_correctness)
View(valid_just_correctness)
colnames(valid_just_correctness)[4] <- "TimelineType"
colnames(valid_just_correctness)[4] <- "TimelineTypeDecrypted"
colnames(valid_just_correctness)[5] <- "TimelineType"
colnames(valid_just_correctness)[10] <- "IsCorrect"
subset(valid_just_correctness, TimelineType=="Timeline 1 (Base Interface)")
timeline_1_correctness_data = subset(valid_just_correctness, TimelineType=="Timeline 1 (Base Interface)")
print(timeline_1_correctness_data)
# Show the group levels
print(levels(timeline_1_correctness_data$TimelineType))
print(valid_just_correctness)
# Show the group levels
print(levels(valid_just_correctness$TimelineType))
View(valid_just_correctness)
View(timeline_1_correctness_data)
View(timeline_1_correctness_data)
levels(valid_just_correctness$TimelineType)
lapply(valid_just_correctness, levels)
library(readr)
valid_just_correctness <- read_csv("git/dual-timeline/post-data/valid just correctness.csv", stringsAsFactors=T)
library(readr)
valid_just_correctness <- read_csv("git/dual-timeline/post-data/valid just correctness.csv", stringsAsFactors=TRUE)
setwd("~/git/dual-timeline/post-data")
library(readr)
valid_just_correctness <- read_csv("valid just correctness.csv",
col_types = cols(`Timeline Type (TimelinesUsed)` = col_factor(levels = c("Timeline 1 (Base Interface)",
"Timeline 2 (Density Graph)", "Timeline 3 (Event Blocks)",
"Timeline 4 (Density Graph + Event Blocks)",
"Timeline 5 (Event Thumbnails)"))))
View(valid_just_correctness)
colnames(valid_just_correctness)[5] <- "TimelineType"
colnames(valid_just_correctness)[10] <- "IsCorrect"
myData = valid_just_correctness
print(myData)
# Show the group levels
print(levels(myData$TimelineType))
myData = valid_just_correctness
print(myData)
# Show the group levels
print(levels(myData$TimelineType))
result = kruskal.test(IsCorrect ~ TimelineType,
data = myData)
print(result)
source("~/git/dual-timeline/post-data/Correctness Kruskal Wallis Tests.R")
source("~/git/dual-timeline/post-data/Correctness Kruskal Wallis Tests.R")
save.image("~/git/dual-timeline/post-data/Duet.RData")
library(readr)
valid_just_sus_scores <- read_csv("valid just sus scores.csv",
col_types = cols(`Timeline Type (TimelinesUsed)` = col_factor(levels = c("Timeline 1 (Base Interface)",
"Timeline 2 (Density Graph)", "Timeline 3 (Event Blocks)",
"Timeline 4 (Density Graph + Event Blocks)",
"Timeline 5 (Event Thumbnails)"))))
View(valid_just_sus_scores)
colnames(valid_just_sus_scores)[5] <- "TimelineType"
colnames(valid_just_sus_scores)[6] <- "SUS"
myData = valid_just_sus_scores
print(myData)
# Show the group levels
print(levels(myData$TimelineType))
result = kruskal.test(SUS ~ TimelineType,
data = myData)
print(result)
myData = valid_just_sus_scores
print(myData)
# Show the group levels
print(levels(myData$TimelineType))
result = kruskal.test(SUS ~ TimelineType,
data = myData)
print(result)
boxplot(myData~TimelineType,
data=myData,
main="Different boxplots for each Timeline Type",
xlab="Month Number",
ylab="Degree Fahrenheit",
col="orange",
border="brown"
horizontal=TRUE
myData = valid_just_sus_scores
print(myData)
# Show the group levels
print(levels(myData$TimelineType))
result = kruskal.test(SUS ~ TimelineType,
data = myData)
print(result)
boxplot(myData~TimelineType,
data=myData,
main="Different boxplots for each Timeline Type",
xlab="Month Number",
ylab="Degree Fahrenheit",
col="orange",
border="brown",
horizontal=TRUE
)
myData = valid_just_sus_scores
print(myData)
# Show the group levels
print(levels(myData$TimelineType))
result = kruskal.test(SUS ~ TimelineType,
data = myData)
print(result)
boxplot(SUS ~ TimelineType,
data=myData,
main="Different boxplots for each Timeline Type",
col="orange",
border="brown",
horizontal=TRUE
)
boxplot(SUS ~ TimelineType,
data=myData,
main="Different boxplots for each Timeline Type",
col="red",
border="orange",
horizontal=TRUE
)
boxplot(SUS ~ TimelineType,
data=myData,
main="Different boxplots for each Timeline Type",
col="orange",
border="red",
horizontal=TRUE
)
myData = valid_just_sus_scores
print(myData)
# Show the group levels
print(levels(myData$TimelineType))
result = kruskal.test(SUS ~ TimelineType,
data = myData)
print(result)
boxplot(SUS ~ TimelineType,
data=myData,
main="Different boxplots for each Timeline Type",
xlab="SUS Score",
ylab="Timeline Type",
col="orange",
border="red",
horizontal=TRUE,
notch=TRUE
)
library(readr)
valid_just_time <- read_csv("valid just time.csv",
col_types = cols(`Timeline Type (TimelinesUsed)` = col_factor(levels = c("Timeline 1 (Base Interface)",
"Timeline 2 (Density Graph)", "Timeline 3 (Event Blocks)",
"Timeline 4 (Density Graph + Event Blocks)",
"Timeline 5 (Event Thumbnails)"))))
View(valid_just_time)
colnames(valid_just_time)[5] <- "TimelineType"
colnames(valid_just_time)[6] <- "TimeBetweenClicks"
source("~/git/dual-timeline/post-data/SUS Kruskal Wallis Tests.R")
source("~/git/dual-timeline/post-data/SUS Kruskal Wallis Tests.R")
source("~/git/dual-timeline/post-data/SUS Kruskal Wallis Tests.R")
source("~/git/dual-timeline/post-data/SUS Kruskal Wallis Tests.R")
myDataSus = valid_just_sus_scores
print(myDataSus)
# Show the group levels
print(levels(myDataSus$TimelineType))
result = kruskal.test(SUS ~ TimelineType,
data = myDataSus)
print(result)
boxplot(SUS ~ TimelineType,
data=myDataSus,
main="Different boxplots for each Timeline Type",
xlab="SUS Score",
ylab="Timeline Type",
col="orange",
border="red",
horizontal=TRUE,
notch=TRUE
)
myDataSus = valid_just_sus_scores
print(myDataSus)
# Show the group levels
print(levels(myDataSus$TimelineType))
result = kruskal.test(SUS ~ TimelineType,
data = myDataSus)
print(result)
boxplot(SUS ~ TimelineType,
data=myDataSus,
main="Different boxplots for each Timeline Type",
xlab="SUS Score",
ylab="Timeline Type",
col="orange",
border="red",
horizontal=TRUE,
notch=TRUE
)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
myDataTime = valid_just_time
print(myDataTime)
# Show the group levels
print(levels(myDataTime$TimelineType))
result = kruskal.test(TimeBetweenClicks ~ TimelineType,
data = myDataTime)
print(result)
boxplot(TimeBetweenClicks ~ TimelineType,
data=myData,
main="Different boxplots for each Timeline Type",
xlab="Time Between First and Last Click",
ylab="Timeline Type",
col="orange",
border="red",
horizontal=TRUE,
notch=TRUE
)
boxplot(TimeBetweenClicks ~ TimelineType,
data=myData,
main="Different boxplots for each Timeline Type",
xlab="Time Between First and Last Click",
ylab="Timeline Type",
col="orange",
border="red",
horizontal=TRUE,
notch=TRUE
)
View(valid_just_time)
boxplot(TimeBetweenClicks ~ TimelineType,
data=myDataTime,
main="Different boxplots for each Timeline Type",
xlab="Time Between First and Last Click",
ylab="Timeline Type",
col="orange",
border="red",
horizontal=TRUE,
notch=TRUE
)
library(readr)
timelineNameAndRank <- read_csv("timelineNameAndRank.csv",
col_types = cols(`Timeline Name` = col_factor(levels = c("Timeline 1 (Base Interface)",
"Timeline 2 (Density Graph)", "Timeline 3 (Event Blocks)",
"Timeline 4 (Density Graph + Event Blocks)",
"Timeline 5 (Event Thumbnails)"))))
View(timelineNameAndRank)
View(timelineNameAndRank)
colnames(timelineNameAndRank)[2] <- "TimelineType"
View(timelineNameAndRank)
library(ggplot2)
install.packages(ggplot2)
install.packages("ggplot2")
library(ggplot2)
myDataRanks = timelineNameAndRank
print(myDataRanks)
# Show the group levels
print(levels(myDataRanks$TimelineType))
ggplot(myDataRanks, aes(fill=Rank, y=Rank, x=TimelineType)) +
geom_bar(position='stack', stat='identity')
library(ggplot2)
myDataRanks = timelineNameAndRank
print(myDataRanks)
# Show the group levels
print(levels(myDataRanks$TimelineType))
ggplot(myDataRanks, aes(fill=Rank, x=TimelineType)) +
geom_bar(position='stack', stat='identity')
library(ggplot2)
myDataRanks = timelineNameAndRank
print(myDataRanks)
# Show the group levels
print(levels(myDataRanks$TimelineType))
ggplot(myDataRanks, aes(fill=TimelineType, y=Rank, x=TimelineType)) +
geom_bar(position='stack', stat='identity')
colnames(timelineNameAndRank)[1] <- "ResponseId"
library(ggplot2)
myDataRanks = timelineNameAndRank
print(myDataRanks)
# Show the group levels
print(levels(myDataRanks$TimelineType))
ggplot(myDataRanks, aes(fill=ResponseId, y=Rank, x=TimelineType)) +
geom_bar(position='stack', stat='identity')
library(ggplot2)
myDataRanks = timelineNameAndRank
print(myDataRanks)
# Show the group levels
print(levels(myDataRanks$TimelineType))
ggplot(myDataRanks, aes(fill=Rank, y=ResponseId, x=TimelineType)) +
geom_bar(position='stack', stat='identity')
View(timelineNameAndRank)
library(ggplot2)
myDataRanks = timelineNameAndRank
print(myDataRanks)
# Show the group levels
print(levels(myDataRanks$TimelineType))
ggplot(myDataRanks, aes(fill=Rank, y=ResponseId, x=TimelineType)) +
geom_bar(position='stack', stat='identity')
save.image("~/git/dual-timeline/post-data/Duet.RData")
